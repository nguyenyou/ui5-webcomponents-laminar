package io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsFiori

import io.github.nguyenyou.ui5.webcomponents.std.IntersectionObserver
import io.github.nguyenyou.ui5.webcomponents.std.IntersectionObserverEntry
import io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsFiori.anon.LoadmoreVoid
import io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsFiori.ui5WebcomponentsFioriStrings.`drill-down`
import io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsFiori.ui5WebcomponentsFioriStrings.process
import org.scalajs.dom.FocusEvent
import org.scalajs.dom.HTMLElement
import org.scalajs.dom.KeyboardEvent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distTimelineMod {
  
  /**
    * @class
    *
    * ### Overview
    *
    * The `ui5-timeline` component shows entries (such as objects, events, or posts) in chronological order.
    * A common use case is to provide information about changes to an object, or events related to an object.
    * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
    * There are two distinct variants of the timeline: basic and social. The basic timeline is read-only,
    * while the social timeline offers a high level of interaction and collaboration, and is integrated within SAP Jam.
    * @constructor
    * @extends UI5Element
    * @public
    * @since 0.8.0
    */
  @JSImport("@ui5/webcomponents-fiori/dist/Timeline.js", JSImport.Default)
  @js.native
  open class default () extends Timeline
  object default {
    
    @JSImport("@ui5/webcomponents-fiori/dist/Timeline.js", JSImport.Default)
    @js.native
    val ^ : js.Any = js.native
    
    /* static member */
    @JSImport("@ui5/webcomponents-fiori/dist/Timeline.js", "default.i18nBundle")
    @js.native
    def i18nBundle: io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsBase.distI18nBundleMod.default = js.native
    inline def i18nBundle_=(x: io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsBase.distI18nBundleMod.default): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("i18nBundle")(x.asInstanceOf[js.Any])
  }
  
  /**
    * Interface for components that may be slotted inside `ui5-timeline` as items
    * @public
    */
  /* import warning: transforms.RemoveMultipleInheritance#findNewParents newComments Dropped parents 
  - `io.github.nguyenyou.ui5.webcomponents`.ui5WebcomponentsBase.distDelegateItemNavigationMod.ITabbable because var conflicts: id. Inlined forcedTabIndex */ @js.native
  trait ITimelineItem
    extends io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsBase.distUi5elementMod.default {
    
    var collapsed: js.UndefOr[Boolean] = js.native
    
    var firstItemInTimeline: js.UndefOr[Boolean] = js.native
    
    var focusLink: js.UndefOr[js.Function0[Unit]] = js.native
    
    var forcedLineWidth: js.UndefOr[String] = js.native
    
    var forcedTabIndex: js.UndefOr[String] = js.native
    
    var icon: js.UndefOr[String] = js.native
    
    var isGroupItem: Boolean = js.native
    
    var isNextItemGroup: js.UndefOr[Boolean] = js.native
    
    var items: js.UndefOr[js.Array[ITimelineItem]] = js.native
    
    var lastItem: Boolean = js.native
    
    var layout: /* template literal string: ${TimelineLayout} */ String = js.native
    
    var nameClickable: js.UndefOr[Boolean] = js.native
    
    var positionInGroup: js.UndefOr[Double] = js.native
  }
  
  /**
    * @class
    *
    * ### Overview
    *
    * The `ui5-timeline` component shows entries (such as objects, events, or posts) in chronological order.
    * A common use case is to provide information about changes to an object, or events related to an object.
    * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
    * There are two distinct variants of the timeline: basic and social. The basic timeline is read-only,
    * while the social timeline offers a high level of interaction and collaboration, and is integrated within SAP Jam.
    * @constructor
    * @extends UI5Element
    * @public
    * @since 0.8.0
    */
  @js.native
  trait Timeline
    extends io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsBase.distUi5elementMod.default {
    
    def _handleDown(): Unit = js.native
    
    def _handleNextOrPreviousItem(e: KeyboardEvent): Unit = js.native
    def _handleNextOrPreviousItem(e: KeyboardEvent, isNext: Boolean): Unit = js.native
    
    def _handleUp(e: KeyboardEvent): Unit = js.native
    
    var _itemNavigation: io.github.nguyenyou.ui5.webcomponents.ui5WebcomponentsBase.distDelegateItemNavigationMod.default = js.native
    
    /**
      * Defines the active state of the `More` button.
      * @private
      */
    var _loadMoreActive: Boolean = js.native
    
    def _navigableItems: js.Array[
        io.github.nguyenyou.ui5.webcomponents.ui5Webcomponents.distToggleButtonMod.default | ITimelineItem
      ] = js.native
    
    def _onLoadMoreClick(): Unit = js.native
    
    def _onLoadMoreKeydown(e: KeyboardEvent): Unit = js.native
    
    def _onLoadMoreKeyup(e: KeyboardEvent): Unit = js.native
    
    def _onfocusin(e: FocusEvent): Unit = js.native
    
    def _onkeydown(e: KeyboardEvent): Unit = js.native
    
    def _setIsNextItemGroup(): Unit = js.native
    
    def _setLastItem(): Unit = js.native
    
    /**
      * Defines the accessible ARIA name of the component.
      * @default undefined
      * @public
      * @since 1.2.0
      */
    var accessibleName: js.UndefOr[String] = js.native
    
    @JSName("ariaLabel")
    def ariaLabel_MTimeline: String = js.native
    
    @JSName("eventDetails")
    var eventDetails_Timeline: LoadmoreVoid = js.native
    
    def focusGrowingButton(): Unit = js.native
    
    def focusItem(item: io.github.nguyenyou.ui5.webcomponents.ui5Webcomponents.distToggleButtonMod.default): Unit = js.native
    /**
      * Focuses a list item and sets its tabindex to "0" via the ItemNavigation
      * @protected
      * @param item
      */
    def focusItem(item: ITimelineItem): Unit = js.native
    
    def getIntersectionObserver(): IntersectionObserver = js.native
    
    /**
      * Defines whether the Timeline will have growing capability either by pressing a "More" button,
      * or via user scroll. In both cases a `load-more` event is fired.
      *
      * Available options:
      *
      * `Button` - Displays a button at the end of the Timeline, which when pressed triggers the `load-more` event.
      *
      * `Scroll` -Triggers the `load-more` event when the user scrolls to the end of the Timeline.
      *
      * `None` (default) - The growing functionality is off.
      *
      * @default "None"
      * @since 2.7.0
      * @public
      */
    var growing: /* template literal string: ${TimelineGrowingMode} */ String = js.native
    
    var growingButton: HTMLElement = js.native
    
    def growingButtonIcon: process | `drill-down` = js.native
    
    var growingIntersectionObserver: js.UndefOr[IntersectionObserver | Null] = js.native
    
    def growsOnScroll: Boolean = js.native
    
    def growsWithButton: Boolean = js.native
    
    var initialIntersection: Boolean = js.native
    
    /**
      * Determines the content of the `ui5-timeline`.
      * @public
      */
    var items: js.Array[ITimelineItem] = js.native
    
    /**
      * Defines the items orientation.
      * @default "Vertical"
      * @since 1.0.0-rc.15
      * @public
      */
    var layout: /* template literal string: ${TimelineLayout} */ String = js.native
    
    def loadMore(): Unit = js.native
    
    /**
      * Defines if the component should display a loading indicator over the Timeline.
      *
      * @default false
      * @since 2.7.0
      * @public
      */
    var loading: Boolean = js.native
    
    /**
      * Defines the delay in milliseconds, after which the loading indicator will show up for this component.
      * @default 1000
      * @public
      */
    var loadingDelay: Double = js.native
    
    def observeTimelineEnd(): js.Promise[Unit] = js.native
    
    def onIntersection(entries: js.Array[IntersectionObserverEntry]): Unit = js.native
    
    def showBusyIndicatorOverlay: Boolean = js.native
    
    var timeLineEndObserved: Boolean = js.native
    
    var timelineEndMarker: HTMLElement = js.native
    
    def unobserveTimelineEnd(): Unit = js.native
  }
}
